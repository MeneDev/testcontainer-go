// Code generated by MockGen. DO NOT EDIT.
// Source: wait.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	wait "github.com/MeneDev/testcontainer-go/wait"
	nat "github.com/docker/go-connections/nat"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStrategy is a mock of Strategy interface
type MockStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyMockRecorder
}

// MockStrategyMockRecorder is the mock recorder for MockStrategy
type MockStrategyMockRecorder struct {
	mock *MockStrategy
}

// NewMockStrategy creates a new mock instance
func NewMockStrategy(ctrl *gomock.Controller) *MockStrategy {
	mock := &MockStrategy{ctrl: ctrl}
	mock.recorder = &MockStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStrategy) EXPECT() *MockStrategyMockRecorder {
	return m.recorder
}

// WaitUntilReady mocks base method
func (m *MockStrategy) WaitUntilReady(arg0 context.Context, arg1 wait.StrategyTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilReady", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilReady indicates an expected call of WaitUntilReady
func (mr *MockStrategyMockRecorder) WaitUntilReady(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilReady", reflect.TypeOf((*MockStrategy)(nil).WaitUntilReady), arg0, arg1)
}

// MockStrategyTarget is a mock of StrategyTarget interface
type MockStrategyTarget struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyTargetMockRecorder
}

// MockStrategyTargetMockRecorder is the mock recorder for MockStrategyTarget
type MockStrategyTargetMockRecorder struct {
	mock *MockStrategyTarget
}

// NewMockStrategyTarget creates a new mock instance
func NewMockStrategyTarget(ctrl *gomock.Controller) *MockStrategyTarget {
	mock := &MockStrategyTarget{ctrl: ctrl}
	mock.recorder = &MockStrategyTargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStrategyTarget) EXPECT() *MockStrategyTargetMockRecorder {
	return m.recorder
}

// Host mocks base method
func (m *MockStrategyTarget) Host(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Host", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Host indicates an expected call of Host
func (mr *MockStrategyTargetMockRecorder) Host(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockStrategyTarget)(nil).Host), arg0)
}

// MappedPort mocks base method
func (m *MockStrategyTarget) MappedPort(arg0 context.Context, arg1 nat.Port) (nat.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MappedPort", arg0, arg1)
	ret0, _ := ret[0].(nat.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MappedPort indicates an expected call of MappedPort
func (mr *MockStrategyTargetMockRecorder) MappedPort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MappedPort", reflect.TypeOf((*MockStrategyTarget)(nil).MappedPort), arg0, arg1)
}
